 SUPSGRAPH - PostScript GRAPH plot of a segy data set			

 supsgraph <stdin [optional parameters] | ...				

 Optional parameters: 							
 style=seismic		seismic is default here, =normal is alternate	
			(see psgraph selfdoc for style definitions)	

 nplot is the number of traces (ntr is an acceptable alias for nplot) 	

 d1=tr.d1 or tr.dt/10^6	sampling interval in the fast dimension	
   =.004 for seismic 		(if not set)				
   =1.0 for nonseismic		(if not set)				

 d2=tr.d2			sampling interval in the slow dimension	
   =1.0 			(if not set)				

 f1=tr.f1 or tr.delrt/10^3 or 0.0  first sample in the fast dimension	

 f2=tr.f2 or tr.tracr or tr.tracl  first sample in the slow dimension	
   =1.0 for seismic		    (if not set)			
   =d2 for nonseismic		    (if not set)			

 verbose=0              =1 to print some useful information		

 tmpdir=	 	if non-empty, use the value as a directory path	
		 	prefix for storing temporary files; else if the	
	         	the CWP_TMPDIR environment variable is set use	
	         	its value for the path; else use tmpfile()	

 Note that for seismic time domain data, the "fast dimension" is	
 time and the "slow dimension" is usually trace number or range.	
 Also note that "foreign" data tapes may have something unexpected	
 in the d2,f2 fields, use segyclean to clear these if you can afford	
 the processing time or use d2= f2= to over-ride the header values if	
 not.									

 See the psgraph selfdoc for the remaining parameters.			

 On NeXT:     supsgraph < infile [optional parameters]  | open      	

 Credits:

	CWP: Dave Hale and Zhiming Li (pswigp, etc.)
	   Jack Cohen and John Stockwell (supswigp, etc.)

 Notes:
	When the number of traces isn't known, we need to count
	the traces for pswigp.  You can make this value "known"
	either by getparring nplot or by having the ntr field set
	in the trace header.  A getparred value takes precedence
	over the value in the trace header.

	When we must compute ntr, we don't allocate a 2-d array,
	but just content ourselves with copying trace by trace from
	the data "file" to the pipe into the plotting program.
	Although we could use tr.data, we allocate a trace buffer
	for code clarity.

